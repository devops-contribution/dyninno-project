apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-resync-script
data:
  detect-restart.sh: |
    #!/bin/bash

    POD_NAME=`kubectl get pod | grep -i writer | awk '{print $1}'`
    NAMESPACE="default"

    # Fetch the current pod's UID and creation timestamp
    CURRENT_UID=$(kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.metadata.uid}')
    CURRENT_TIMESTAMP=$(kubectl get pod $POD_NAME -n $NAMESPACE -o jsonpath='{.metadata.creationTimestamp}')

    # Fetch the previously stored UID and timestamp
    PREVIOUS_UID=$(kubectl get configmap pod-status -n $NAMESPACE -o jsonpath='{.data.uid}')
    PREVIOUS_TIMESTAMP=$(kubectl get configmap pod-status -n $NAMESPACE -o jsonpath='{.data.timestamp}')

    # Compare the values
    if [[ "$CURRENT_UID" != "$PREVIOUS_UID" ]]; then
        echo "Pod $POD_NAME has been recreated!"
        export GTID=$(kubectl exec -i mysql-master-0 -- mysql -h mysql-master-0 -uroot -prootpassword -e "SHOW MASTER STATUS\G;" | grep -i gtid | awk '{print $2}')
        echo $GTID
        kubectl exec -i mysql-slave-0 -- mysql -h mysql-slave-0 -uroot -prootpassword -e "
            STOP SLAVE;
            RESET MASTER;
            SET @@GLOBAL.GTID_PURGED = '$GTID';
            CHANGE MASTER TO MASTER_AUTO_POSITION = 1;
            START SLAVE;
        "

    else
        echo "Pod $POD_NAME has not been recreated."
    fi

    # Update the ConfigMap with the new UID and timestamp
    kubectl create configmap pod-status -n $NAMESPACE --from-literal=uid=$CURRENT_UID --from-literal=timestamp=$CURRENT_TIMESTAMP --dry-run=client -o yaml | kubectl apply -f -
