---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reader
spec:
  replicas: 3
  selector:
    matchLabels:
      app: reader
  template:
    metadata:
      labels:
        app: reader
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:latest
          command: ["sh", "-c", "
            until mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e 'SELECT 1'; do
              echo 'Waiting for 'test' db to be created...';
              sleep 5;
            done;
            mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD -D $MYSQL_DATABASE -e '
              CREATE TABLE IF NOT EXISTS data (
                id INT AUTO_INCREMENT PRIMARY KEY,
                value DOUBLE NOT NULL
              );
            ';
          "]
          env:
            - name: MYSQL_HOST
              #value: "mysql-0.mysql.default.svc.cluster.local"
              value: "mysql-slave-0.mysql-slave.default.svc.cluster.local"
            - name: MYSQL_USER
              value: "root"
            - name: MYSQL_PASSWORD
              value: "rootpassword"
            - name: MYSQL_DATABASE
              value: "test"
 
        - name: setup-slave
          image: mysql:latest
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Waiting for Master Status..."
              while [ ! -f /replication/master-status.txt ]; do sleep 2; done 
             
              echo "Reading Master Status..."
              MASTER_LOG_FILE=$(grep "File:" /replication/master-status.txt | awk '{print $2}')
              MASTER_LOG_POS=$(grep "Position:" /replication/master-status.txt | awk '{print $2}')
  
              echo "Setting up replication on slave..."
              mysql -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_ROOT_PASSWORD -e "
                STOP SLAVE;
                CHANGE MASTER TO 
                  MASTER_HOST='mysql-master',
                  MASTER_USER='replication_user',
                  MASTER_PASSWORD='replication_password',
                  MASTER_LOG_FILE='$MASTER_LOG_FILE',
                  MASTER_LOG_POS=$MASTER_LOG_POS;
                START SLAVE;
              "
       
          volumeMounts:
            - name: replication-volume
              mountPath: /replication
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "rootpassword"
            - name: MYSQL_HOST
              value: "mysql-slave-0.mysql-slave.default.svc.cluster.local"
            - name: MYSQL_USER
              value: "root"            

      containers:
        - name: reader
          image: docker.io/muk007/reader:version-20
          ports:
            - containerPort: 5000
            - containerPort: 8001
          env:
            - name: MYSQL_HOST
              #value: "mysql-1.mysql.default.svc.cluster.local"
              value: "mysql-slave-0.mysql-slave.default.svc.cluster.local"
            - name: MYSQL_USER
              value: "root"
            - name: MYSQL_PASSWORD
              value: "rootpassword"
            - name: MYSQL_DATABASE
              value: "test"
      volumes:
        - name: replication-volume
          persistentVolumeClaim:
            claimName: my-pvc
            
---
apiVersion: v1
kind: Service
metadata:
  name: reader-service
  labels:
    app: reader
spec:
  selector:
    app: reader
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 5000
    - name: metrics
      protocol: TCP
      port: 8001
      targetPort: 8001
  type: ClusterIP
